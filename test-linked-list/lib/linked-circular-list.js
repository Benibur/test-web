// Generated by CoffeeScript 1.12.6

/*

head  node
         A
prev  |  |  next
      V
tail  node
 */

(function() {
  var DoublyLinkedListCircular;

  module.exports = DoublyLinkedListCircular = (function() {

    /*
     * Constructor. Takes no arguments.
     */
    function DoublyLinkedListCircular() {
      this._head = null;
      this._tail = null;
      this._length = 0;
      this._counter = 0;
      return;
    }

    DoublyLinkedListCircular.prototype._createNewNode = function(data) {
      var node;
      node = {
        data: data,
        next: null,
        next: null,
        id: this._counter
      };
      this._counter++;
      return node;
    };


    /*
     * Appends a node to the end of the list.
     */

    DoublyLinkedListCircular.prototype.append = function(data) {
      var node;
      node = this._createNewNode(data);
      if (this._length === 0) {
        this._head = node;
        this._tail = node;
        this._tail.next = node;
        this._tail.prev = node;
        this._head.next = node;
        this._head.prev = node;
      } else {
        this._tail.prev = node;
        node.next = this._tail;
        node.prev = this._head;
        this._head.next = node;
        this._tail = node;
      }
      this._length++;
      return node;
    };


    /*
     * Prepends a node to the start of the list.
     */

    DoublyLinkedListCircular.prototype.prepend = function(data) {
      var node;
      if (this._length === 0) {
        return this.append(data);
      } else {
        node = this._createNewNode(data);
        this._head.next = node;
        node.prev = this._head;
        this._tail.prev = node;
        node.next = this._tail;
        this._head = node;
      }
      this._length++;
      return node;
    };


    /*
     * Insert one node at rank.
     * if rank = length => will be inserted as tail
     * Returns undefined if rank out of range.
     */

    DoublyLinkedListCircular.prototype.insert = function(rank, data) {
      var next, nodeToAdd, target;
      if (this._length === 0) {
        if (rank !== 0) {
          return void 0;
        }
        return this.append(data);
      }
      if (rank === 0) {
        return this.prepend(data);
      }
      if (rank === this._length) {
        return this.append(data);
      }
      if (this._length < rank || rank < 0) {
        return void 0;
      }
      nodeToAdd = this._createNewNode(data);
      target = this.at(rank);
      if (target === void 0) {
        return void 0;
      }
      next = target.next;
      target.next = nodeToAdd;
      nodeToAdd.prev = target;
      nodeToAdd.next = next;
      next.prev = nodeToAdd;
      this._length++;
      return nodeToAdd;
    };


    /*
     * Returns the node at the specified index. The index starts at 0.
     * Undefined if index out of range.
     */

    DoublyLinkedListCircular.prototype.at = function(index) {
      var node;
      if (index >= 0 && index < this._length) {
        node = this._head;
        while (index--) {
          node = node.prev;
        }
        return node;
      }
      return void 0;
    };


    /*
     * Returns the node with the specified id, undefined if wrong id.
     */

    DoublyLinkedListCircular.prototype.id = function(id) {
      var _head, index, node;
      id = parseInt(id);
      index = this._length;
      node = this._head;
      _head = this._head;
      while (index--) {
        if (node.id === id) {
          return node;
        }
        node = node.prev;
      }
      return void 0;
    };


    /*
     * Returns the rank of a node, undefined if node not found
     */

    DoublyLinkedListCircular.prototype.rank = function(node) {
      var currentNode, id, index, rank;
      rank = 0;
      id = parseInt(id);
      index = this._length;
      currentNode = this._head;
      while (index--) {
        if (currentNode === node) {
          return this._length - index - 1;
        }
        currentNode = currentNode.prev;
      }
      return void 0;
    };


    /*
     * Returns the node at the head of the list.
     */

    DoublyLinkedListCircular.prototype.head = function() {
      return this._head;
    };


    /*
     * Returns the node at the tail of the list.
     */

    DoublyLinkedListCircular.prototype.tail = function() {
      return this._tail;
    };


    /*
     * Returns the size of the list.
     */

    DoublyLinkedListCircular.prototype.size = function() {
      return this._length;
    };


    /*
     * Removes the item at the index.
     * Returns undefined if index out of range
     */

    DoublyLinkedListCircular.prototype.remove = function(index) {
      var node;
      node = this.at(index);
      if (node === void 0) {
        return void 0;
      }
      return this._removeNode(node);
    };


    /*
     * Removes the item with this id
     * Returns undefined if index out of range
     */

    DoublyLinkedListCircular.prototype.removeID = function(id) {
      var node;
      node = this.id(id);
      if (node === void 0) {
        return void 0;
      }
      return this._removeNode(node);
    };

    DoublyLinkedListCircular.prototype._removeNode = function(node) {
      var next, prev;
      if (this._length === 0) {
        return void 0;
      }
      if (this._length === 1) {
        if (node !== this._head) {
          return void 0;
        }
        this._head = null;
        this._tail = null;
        this._length = 0;
        return node;
      }
      if (node === this._head) {
        this._head = node.prev;
        this._head.next = this._tail;
        this._tail.prev = this._head;
        node.prev = null;
        node.next = null;
        this._length -= 1;
        return node;
      }
      if (node === this._tail) {
        this._tail = node.next;
        this._tail.prev = this._head;
        this._head.next = this._tail;
        node.next = null;
        node.prev = null;
        this._length -= 1;
        return node;
      }
      prev = node.prev;
      next = node.next;
      prev.next = next;
      next.prev = prev;
      node.prev = null;
      node.next = null;
      this._length -= 1;
      return node;
    };

    DoublyLinkedListCircular.prototype.printAllChain = function() {
      var index, length, node, rk, txt;
      node = this._head;
      if (node === null) {
        return 'empty chain';
      }
      txt = [];
      index = this._length;
      length = this._length - 1;
      while (index--) {
        rk = length - index;
        txt.push(rk + " - id:" + node.id + " - data:" + node.data);
        node = node.prev;
      }
      return txt.join('\n');
    };

    DoublyLinkedListCircular.prototype.printIdChain = function() {
      var index, node, txt;
      node = this._head;
      if (node === null) {
        return 'empty chain';
      }
      txt = [];
      index = this._length;
      while (index--) {
        txt.push(node.id);
        node = node.prev;
      }
      return txt.join('-');
    };

    DoublyLinkedListCircular.prototype.printDataChain = function() {
      var index, node, txt;
      node = this._head;
      if (node === null) {
        return 'empty chain';
      }
      txt = [];
      index = this._length;
      while (index--) {
        txt.push(node.data);
        node = node.prev;
      }
      return txt.join('-');
    };

    return DoublyLinkedListCircular;

  })();

}).call(this);
